// Code generated by go-queryset. DO NOT EDIT.
package model

import (
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
	"github.com/nange/gospider/common"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set TaskQuerySet

// TaskQuerySet is an queryset type for Task
type TaskQuerySet struct {
	db *gorm.DB
}

// NewTaskQuerySet constructs new TaskQuerySet
func NewTaskQuerySet(db *gorm.DB) TaskQuerySet {
	return TaskQuerySet{
		db: db.Model(&Task{}),
	}
}

func (qs TaskQuerySet) w(db *gorm.DB) TaskQuerySet {
	return NewTaskQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) All(ret *[]Task) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// CountsEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CountsEq(counts int) TaskQuerySet {
	return qs.w(qs.db.Where("counts = ?", counts))
}

// CountsGt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CountsGt(counts int) TaskQuerySet {
	return qs.w(qs.db.Where("counts > ?", counts))
}

// CountsGte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CountsGte(counts int) TaskQuerySet {
	return qs.w(qs.db.Where("counts >= ?", counts))
}

// CountsIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CountsIn(counts int, countsRest ...int) TaskQuerySet {
	iArgs := []interface{}{counts}
	for _, arg := range countsRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("counts IN (?)", iArgs))
}

// CountsLt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CountsLt(counts int) TaskQuerySet {
	return qs.w(qs.db.Where("counts < ?", counts))
}

// CountsLte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CountsLte(counts int) TaskQuerySet {
	return qs.w(qs.db.Where("counts <= ?", counts))
}

// CountsNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CountsNe(counts int) TaskQuerySet {
	return qs.w(qs.db.Where("counts != ?", counts))
}

// CountsNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CountsNotIn(counts int, countsRest ...int) TaskQuerySet {
	iArgs := []interface{}{counts}
	for _, arg := range countsRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("counts NOT IN (?)", iArgs))
}

// Create is an autogenerated method
// nolint: dupl
func (o *Task) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CreatedAtEq(createdAt time.Time) TaskQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CreatedAtGt(createdAt time.Time) TaskQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CreatedAtGte(createdAt time.Time) TaskQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CreatedAtLt(createdAt time.Time) TaskQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CreatedAtLte(createdAt time.Time) TaskQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CreatedAtNe(createdAt time.Time) TaskQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// CronSpecEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CronSpecEq(cronSpec string) TaskQuerySet {
	return qs.w(qs.db.Where("cron_spec = ?", cronSpec))
}

// CronSpecIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CronSpecIn(cronSpec string, cronSpecRest ...string) TaskQuerySet {
	iArgs := []interface{}{cronSpec}
	for _, arg := range cronSpecRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("cron_spec IN (?)", iArgs))
}

// CronSpecNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CronSpecNe(cronSpec string) TaskQuerySet {
	return qs.w(qs.db.Where("cron_spec != ?", cronSpec))
}

// CronSpecNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CronSpecNotIn(cronSpec string, cronSpecRest ...string) TaskQuerySet {
	iArgs := []interface{}{cronSpec}
	for _, arg := range cronSpecRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("cron_spec NOT IN (?)", iArgs))
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Task) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) Delete() error {
	return qs.db.Delete(Task{}).Error
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) GetUpdater() TaskUpdater {
	return NewTaskUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) IDEq(ID uint64) TaskQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) IDGt(ID uint64) TaskQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) IDGte(ID uint64) TaskQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) IDIn(ID uint64, IDRest ...uint64) TaskQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id IN (?)", iArgs))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) IDLt(ID uint64) TaskQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) IDLte(ID uint64) TaskQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) IDNe(ID uint64) TaskQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) IDNotIn(ID uint64, IDRest ...uint64) TaskQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", iArgs))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) Limit(limit int) TaskQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// LimitDelayEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDelayEq(limitDelay int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_delay = ?", limitDelay))
}

// LimitDelayGt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDelayGt(limitDelay int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_delay > ?", limitDelay))
}

// LimitDelayGte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDelayGte(limitDelay int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_delay >= ?", limitDelay))
}

// LimitDelayIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDelayIn(limitDelay int, limitDelayRest ...int) TaskQuerySet {
	iArgs := []interface{}{limitDelay}
	for _, arg := range limitDelayRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("limit_delay IN (?)", iArgs))
}

// LimitDelayLt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDelayLt(limitDelay int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_delay < ?", limitDelay))
}

// LimitDelayLte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDelayLte(limitDelay int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_delay <= ?", limitDelay))
}

// LimitDelayNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDelayNe(limitDelay int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_delay != ?", limitDelay))
}

// LimitDelayNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDelayNotIn(limitDelay int, limitDelayRest ...int) TaskQuerySet {
	iArgs := []interface{}{limitDelay}
	for _, arg := range limitDelayRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("limit_delay NOT IN (?)", iArgs))
}

// LimitDomainGlobEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDomainGlobEq(limitDomainGlob string) TaskQuerySet {
	return qs.w(qs.db.Where("limit_domain_glob = ?", limitDomainGlob))
}

// LimitDomainGlobIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDomainGlobIn(limitDomainGlob string, limitDomainGlobRest ...string) TaskQuerySet {
	iArgs := []interface{}{limitDomainGlob}
	for _, arg := range limitDomainGlobRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("limit_domain_glob IN (?)", iArgs))
}

// LimitDomainGlobNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDomainGlobNe(limitDomainGlob string) TaskQuerySet {
	return qs.w(qs.db.Where("limit_domain_glob != ?", limitDomainGlob))
}

// LimitDomainGlobNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDomainGlobNotIn(limitDomainGlob string, limitDomainGlobRest ...string) TaskQuerySet {
	iArgs := []interface{}{limitDomainGlob}
	for _, arg := range limitDomainGlobRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("limit_domain_glob NOT IN (?)", iArgs))
}

// LimitDomainRegexpEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDomainRegexpEq(limitDomainRegexp string) TaskQuerySet {
	return qs.w(qs.db.Where("limit_domain_regexp = ?", limitDomainRegexp))
}

// LimitDomainRegexpIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDomainRegexpIn(limitDomainRegexp string, limitDomainRegexpRest ...string) TaskQuerySet {
	iArgs := []interface{}{limitDomainRegexp}
	for _, arg := range limitDomainRegexpRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("limit_domain_regexp IN (?)", iArgs))
}

// LimitDomainRegexpNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDomainRegexpNe(limitDomainRegexp string) TaskQuerySet {
	return qs.w(qs.db.Where("limit_domain_regexp != ?", limitDomainRegexp))
}

// LimitDomainRegexpNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDomainRegexpNotIn(limitDomainRegexp string, limitDomainRegexpRest ...string) TaskQuerySet {
	iArgs := []interface{}{limitDomainRegexp}
	for _, arg := range limitDomainRegexpRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("limit_domain_regexp NOT IN (?)", iArgs))
}

// LimitEnableEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitEnableEq(limitEnable bool) TaskQuerySet {
	return qs.w(qs.db.Where("limit_enable = ?", limitEnable))
}

// LimitEnableIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitEnableIn(limitEnable bool, limitEnableRest ...bool) TaskQuerySet {
	iArgs := []interface{}{limitEnable}
	for _, arg := range limitEnableRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("limit_enable IN (?)", iArgs))
}

// LimitEnableNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitEnableNe(limitEnable bool) TaskQuerySet {
	return qs.w(qs.db.Where("limit_enable != ?", limitEnable))
}

// LimitEnableNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitEnableNotIn(limitEnable bool, limitEnableRest ...bool) TaskQuerySet {
	iArgs := []interface{}{limitEnable}
	for _, arg := range limitEnableRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("limit_enable NOT IN (?)", iArgs))
}

// LimitParallelismEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitParallelismEq(limitParallelism int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_parallelism = ?", limitParallelism))
}

// LimitParallelismGt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitParallelismGt(limitParallelism int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_parallelism > ?", limitParallelism))
}

// LimitParallelismGte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitParallelismGte(limitParallelism int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_parallelism >= ?", limitParallelism))
}

// LimitParallelismIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitParallelismIn(limitParallelism int, limitParallelismRest ...int) TaskQuerySet {
	iArgs := []interface{}{limitParallelism}
	for _, arg := range limitParallelismRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("limit_parallelism IN (?)", iArgs))
}

// LimitParallelismLt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitParallelismLt(limitParallelism int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_parallelism < ?", limitParallelism))
}

// LimitParallelismLte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitParallelismLte(limitParallelism int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_parallelism <= ?", limitParallelism))
}

// LimitParallelismNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitParallelismNe(limitParallelism int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_parallelism != ?", limitParallelism))
}

// LimitParallelismNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitParallelismNotIn(limitParallelism int, limitParallelismRest ...int) TaskQuerySet {
	iArgs := []interface{}{limitParallelism}
	for _, arg := range limitParallelismRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("limit_parallelism NOT IN (?)", iArgs))
}

// LimitRandomDelayEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitRandomDelayEq(limitRandomDelay int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_random_delay = ?", limitRandomDelay))
}

// LimitRandomDelayGt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitRandomDelayGt(limitRandomDelay int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_random_delay > ?", limitRandomDelay))
}

// LimitRandomDelayGte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitRandomDelayGte(limitRandomDelay int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_random_delay >= ?", limitRandomDelay))
}

// LimitRandomDelayIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitRandomDelayIn(limitRandomDelay int, limitRandomDelayRest ...int) TaskQuerySet {
	iArgs := []interface{}{limitRandomDelay}
	for _, arg := range limitRandomDelayRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("limit_random_delay IN (?)", iArgs))
}

// LimitRandomDelayLt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitRandomDelayLt(limitRandomDelay int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_random_delay < ?", limitRandomDelay))
}

// LimitRandomDelayLte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitRandomDelayLte(limitRandomDelay int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_random_delay <= ?", limitRandomDelay))
}

// LimitRandomDelayNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitRandomDelayNe(limitRandomDelay int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_random_delay != ?", limitRandomDelay))
}

// LimitRandomDelayNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitRandomDelayNotIn(limitRandomDelay int, limitRandomDelayRest ...int) TaskQuerySet {
	iArgs := []interface{}{limitRandomDelay}
	for _, arg := range limitRandomDelayRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("limit_random_delay NOT IN (?)", iArgs))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs TaskQuerySet) One(ret *Task) error {
	return qs.db.First(ret).Error
}

// OptAllowedDomainsEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptAllowedDomainsEq(optAllowedDomains string) TaskQuerySet {
	return qs.w(qs.db.Where("opt_allowed_domains = ?", optAllowedDomains))
}

// OptAllowedDomainsIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptAllowedDomainsIn(optAllowedDomains string, optAllowedDomainsRest ...string) TaskQuerySet {
	iArgs := []interface{}{optAllowedDomains}
	for _, arg := range optAllowedDomainsRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("opt_allowed_domains IN (?)", iArgs))
}

// OptAllowedDomainsNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptAllowedDomainsNe(optAllowedDomains string) TaskQuerySet {
	return qs.w(qs.db.Where("opt_allowed_domains != ?", optAllowedDomains))
}

// OptAllowedDomainsNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptAllowedDomainsNotIn(optAllowedDomains string, optAllowedDomainsRest ...string) TaskQuerySet {
	iArgs := []interface{}{optAllowedDomains}
	for _, arg := range optAllowedDomainsRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("opt_allowed_domains NOT IN (?)", iArgs))
}

// OptMaxBodySizeEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxBodySizeEq(optMaxBodySize int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_max_body_size = ?", optMaxBodySize))
}

// OptMaxBodySizeGt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxBodySizeGt(optMaxBodySize int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_max_body_size > ?", optMaxBodySize))
}

// OptMaxBodySizeGte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxBodySizeGte(optMaxBodySize int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_max_body_size >= ?", optMaxBodySize))
}

// OptMaxBodySizeIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxBodySizeIn(optMaxBodySize int, optMaxBodySizeRest ...int) TaskQuerySet {
	iArgs := []interface{}{optMaxBodySize}
	for _, arg := range optMaxBodySizeRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("opt_max_body_size IN (?)", iArgs))
}

// OptMaxBodySizeLt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxBodySizeLt(optMaxBodySize int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_max_body_size < ?", optMaxBodySize))
}

// OptMaxBodySizeLte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxBodySizeLte(optMaxBodySize int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_max_body_size <= ?", optMaxBodySize))
}

// OptMaxBodySizeNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxBodySizeNe(optMaxBodySize int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_max_body_size != ?", optMaxBodySize))
}

// OptMaxBodySizeNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxBodySizeNotIn(optMaxBodySize int, optMaxBodySizeRest ...int) TaskQuerySet {
	iArgs := []interface{}{optMaxBodySize}
	for _, arg := range optMaxBodySizeRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("opt_max_body_size NOT IN (?)", iArgs))
}

// OptMaxDepthEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxDepthEq(optMaxDepth int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_max_depth = ?", optMaxDepth))
}

// OptMaxDepthGt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxDepthGt(optMaxDepth int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_max_depth > ?", optMaxDepth))
}

// OptMaxDepthGte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxDepthGte(optMaxDepth int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_max_depth >= ?", optMaxDepth))
}

// OptMaxDepthIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxDepthIn(optMaxDepth int, optMaxDepthRest ...int) TaskQuerySet {
	iArgs := []interface{}{optMaxDepth}
	for _, arg := range optMaxDepthRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("opt_max_depth IN (?)", iArgs))
}

// OptMaxDepthLt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxDepthLt(optMaxDepth int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_max_depth < ?", optMaxDepth))
}

// OptMaxDepthLte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxDepthLte(optMaxDepth int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_max_depth <= ?", optMaxDepth))
}

// OptMaxDepthNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxDepthNe(optMaxDepth int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_max_depth != ?", optMaxDepth))
}

// OptMaxDepthNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxDepthNotIn(optMaxDepth int, optMaxDepthRest ...int) TaskQuerySet {
	iArgs := []interface{}{optMaxDepth}
	for _, arg := range optMaxDepthRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("opt_max_depth NOT IN (?)", iArgs))
}

// OptURLFiltersEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptURLFiltersEq(optURLFilters string) TaskQuerySet {
	return qs.w(qs.db.Where("opt_url_filters = ?", optURLFilters))
}

// OptURLFiltersIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptURLFiltersIn(optURLFilters string, optURLFiltersRest ...string) TaskQuerySet {
	iArgs := []interface{}{optURLFilters}
	for _, arg := range optURLFiltersRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("opt_url_filters IN (?)", iArgs))
}

// OptURLFiltersNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptURLFiltersNe(optURLFilters string) TaskQuerySet {
	return qs.w(qs.db.Where("opt_url_filters != ?", optURLFilters))
}

// OptURLFiltersNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptURLFiltersNotIn(optURLFilters string, optURLFiltersRest ...string) TaskQuerySet {
	iArgs := []interface{}{optURLFilters}
	for _, arg := range optURLFiltersRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("opt_url_filters NOT IN (?)", iArgs))
}

// OptUserAgentEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptUserAgentEq(optUserAgent string) TaskQuerySet {
	return qs.w(qs.db.Where("opt_user_agent = ?", optUserAgent))
}

// OptUserAgentIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptUserAgentIn(optUserAgent string, optUserAgentRest ...string) TaskQuerySet {
	iArgs := []interface{}{optUserAgent}
	for _, arg := range optUserAgentRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("opt_user_agent IN (?)", iArgs))
}

// OptUserAgentNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptUserAgentNe(optUserAgent string) TaskQuerySet {
	return qs.w(qs.db.Where("opt_user_agent != ?", optUserAgent))
}

// OptUserAgentNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptUserAgentNotIn(optUserAgent string, optUserAgentRest ...string) TaskQuerySet {
	iArgs := []interface{}{optUserAgent}
	for _, arg := range optUserAgentRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("opt_user_agent NOT IN (?)", iArgs))
}

// OrderAscByCounts is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderAscByCounts() TaskQuerySet {
	return qs.w(qs.db.Order("counts ASC"))
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderAscByCreatedAt() TaskQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderAscByID() TaskQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByLimitDelay is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderAscByLimitDelay() TaskQuerySet {
	return qs.w(qs.db.Order("limit_delay ASC"))
}

// OrderAscByLimitParallelism is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderAscByLimitParallelism() TaskQuerySet {
	return qs.w(qs.db.Order("limit_parallelism ASC"))
}

// OrderAscByLimitRandomDelay is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderAscByLimitRandomDelay() TaskQuerySet {
	return qs.w(qs.db.Order("limit_random_delay ASC"))
}

// OrderAscByOptMaxBodySize is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderAscByOptMaxBodySize() TaskQuerySet {
	return qs.w(qs.db.Order("opt_max_body_size ASC"))
}

// OrderAscByOptMaxDepth is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderAscByOptMaxDepth() TaskQuerySet {
	return qs.w(qs.db.Order("opt_max_depth ASC"))
}

// OrderAscByStatus is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderAscByStatus() TaskQuerySet {
	return qs.w(qs.db.Order("status ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderAscByUpdatedAt() TaskQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCounts is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderDescByCounts() TaskQuerySet {
	return qs.w(qs.db.Order("counts DESC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderDescByCreatedAt() TaskQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderDescByID() TaskQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByLimitDelay is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderDescByLimitDelay() TaskQuerySet {
	return qs.w(qs.db.Order("limit_delay DESC"))
}

// OrderDescByLimitParallelism is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderDescByLimitParallelism() TaskQuerySet {
	return qs.w(qs.db.Order("limit_parallelism DESC"))
}

// OrderDescByLimitRandomDelay is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderDescByLimitRandomDelay() TaskQuerySet {
	return qs.w(qs.db.Order("limit_random_delay DESC"))
}

// OrderDescByOptMaxBodySize is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderDescByOptMaxBodySize() TaskQuerySet {
	return qs.w(qs.db.Order("opt_max_body_size DESC"))
}

// OrderDescByOptMaxDepth is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderDescByOptMaxDepth() TaskQuerySet {
	return qs.w(qs.db.Order("opt_max_depth DESC"))
}

// OrderDescByStatus is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderDescByStatus() TaskQuerySet {
	return qs.w(qs.db.Order("status DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderDescByUpdatedAt() TaskQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// SetCounts is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetCounts(counts int) TaskUpdater {
	u.fields[string(TaskDBSchema.Counts)] = counts
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetCreatedAt(createdAt time.Time) TaskUpdater {
	u.fields[string(TaskDBSchema.CreatedAt)] = createdAt
	return u
}

// SetCronSpec is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetCronSpec(cronSpec string) TaskUpdater {
	u.fields[string(TaskDBSchema.CronSpec)] = cronSpec
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetID(ID uint64) TaskUpdater {
	u.fields[string(TaskDBSchema.ID)] = ID
	return u
}

// SetLimitDelay is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetLimitDelay(limitDelay int) TaskUpdater {
	u.fields[string(TaskDBSchema.LimitDelay)] = limitDelay
	return u
}

// SetLimitDomainGlob is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetLimitDomainGlob(limitDomainGlob string) TaskUpdater {
	u.fields[string(TaskDBSchema.LimitDomainGlob)] = limitDomainGlob
	return u
}

// SetLimitDomainRegexp is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetLimitDomainRegexp(limitDomainRegexp string) TaskUpdater {
	u.fields[string(TaskDBSchema.LimitDomainRegexp)] = limitDomainRegexp
	return u
}

// SetLimitEnable is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetLimitEnable(limitEnable bool) TaskUpdater {
	u.fields[string(TaskDBSchema.LimitEnable)] = limitEnable
	return u
}

// SetLimitParallelism is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetLimitParallelism(limitParallelism int) TaskUpdater {
	u.fields[string(TaskDBSchema.LimitParallelism)] = limitParallelism
	return u
}

// SetLimitRandomDelay is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetLimitRandomDelay(limitRandomDelay int) TaskUpdater {
	u.fields[string(TaskDBSchema.LimitRandomDelay)] = limitRandomDelay
	return u
}

// SetOptAllowedDomains is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetOptAllowedDomains(optAllowedDomains string) TaskUpdater {
	u.fields[string(TaskDBSchema.OptAllowedDomains)] = optAllowedDomains
	return u
}

// SetOptMaxBodySize is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetOptMaxBodySize(optMaxBodySize int) TaskUpdater {
	u.fields[string(TaskDBSchema.OptMaxBodySize)] = optMaxBodySize
	return u
}

// SetOptMaxDepth is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetOptMaxDepth(optMaxDepth int) TaskUpdater {
	u.fields[string(TaskDBSchema.OptMaxDepth)] = optMaxDepth
	return u
}

// SetOptURLFilters is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetOptURLFilters(optURLFilters string) TaskUpdater {
	u.fields[string(TaskDBSchema.OptURLFilters)] = optURLFilters
	return u
}

// SetOptUserAgent is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetOptUserAgent(optUserAgent string) TaskUpdater {
	u.fields[string(TaskDBSchema.OptUserAgent)] = optUserAgent
	return u
}

// SetStatus is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetStatus(status common.TaskStatus) TaskUpdater {
	u.fields[string(TaskDBSchema.Status)] = status
	return u
}

// SetTaskDesc is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetTaskDesc(taskDesc string) TaskUpdater {
	u.fields[string(TaskDBSchema.TaskDesc)] = taskDesc
	return u
}

// SetTaskName is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetTaskName(taskName string) TaskUpdater {
	u.fields[string(TaskDBSchema.TaskName)] = taskName
	return u
}

// SetTaskRuleName is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetTaskRuleName(taskRuleName string) TaskUpdater {
	u.fields[string(TaskDBSchema.TaskRuleName)] = taskRuleName
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetUpdatedAt(updatedAt time.Time) TaskUpdater {
	u.fields[string(TaskDBSchema.UpdatedAt)] = updatedAt
	return u
}

// StatusEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) StatusEq(status common.TaskStatus) TaskQuerySet {
	return qs.w(qs.db.Where("status = ?", status))
}

// StatusGt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) StatusGt(status common.TaskStatus) TaskQuerySet {
	return qs.w(qs.db.Where("status > ?", status))
}

// StatusGte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) StatusGte(status common.TaskStatus) TaskQuerySet {
	return qs.w(qs.db.Where("status >= ?", status))
}

// StatusIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) StatusIn(status common.TaskStatus, statusRest ...common.TaskStatus) TaskQuerySet {
	iArgs := []interface{}{status}
	for _, arg := range statusRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("status IN (?)", iArgs))
}

// StatusLt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) StatusLt(status common.TaskStatus) TaskQuerySet {
	return qs.w(qs.db.Where("status < ?", status))
}

// StatusLte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) StatusLte(status common.TaskStatus) TaskQuerySet {
	return qs.w(qs.db.Where("status <= ?", status))
}

// StatusNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) StatusNe(status common.TaskStatus) TaskQuerySet {
	return qs.w(qs.db.Where("status != ?", status))
}

// StatusNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) StatusNotIn(status common.TaskStatus, statusRest ...common.TaskStatus) TaskQuerySet {
	iArgs := []interface{}{status}
	for _, arg := range statusRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("status NOT IN (?)", iArgs))
}

// TaskDescEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) TaskDescEq(taskDesc string) TaskQuerySet {
	return qs.w(qs.db.Where("task_desc = ?", taskDesc))
}

// TaskDescIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) TaskDescIn(taskDesc string, taskDescRest ...string) TaskQuerySet {
	iArgs := []interface{}{taskDesc}
	for _, arg := range taskDescRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("task_desc IN (?)", iArgs))
}

// TaskDescNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) TaskDescNe(taskDesc string) TaskQuerySet {
	return qs.w(qs.db.Where("task_desc != ?", taskDesc))
}

// TaskDescNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) TaskDescNotIn(taskDesc string, taskDescRest ...string) TaskQuerySet {
	iArgs := []interface{}{taskDesc}
	for _, arg := range taskDescRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("task_desc NOT IN (?)", iArgs))
}

// TaskNameEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) TaskNameEq(taskName string) TaskQuerySet {
	return qs.w(qs.db.Where("task_name = ?", taskName))
}

// TaskNameIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) TaskNameIn(taskName string, taskNameRest ...string) TaskQuerySet {
	iArgs := []interface{}{taskName}
	for _, arg := range taskNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("task_name IN (?)", iArgs))
}

// TaskNameNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) TaskNameNe(taskName string) TaskQuerySet {
	return qs.w(qs.db.Where("task_name != ?", taskName))
}

// TaskNameNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) TaskNameNotIn(taskName string, taskNameRest ...string) TaskQuerySet {
	iArgs := []interface{}{taskName}
	for _, arg := range taskNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("task_name NOT IN (?)", iArgs))
}

// TaskRuleNameEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) TaskRuleNameEq(taskRuleName string) TaskQuerySet {
	return qs.w(qs.db.Where("task_rule_name = ?", taskRuleName))
}

// TaskRuleNameIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) TaskRuleNameIn(taskRuleName string, taskRuleNameRest ...string) TaskQuerySet {
	iArgs := []interface{}{taskRuleName}
	for _, arg := range taskRuleNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("task_rule_name IN (?)", iArgs))
}

// TaskRuleNameNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) TaskRuleNameNe(taskRuleName string) TaskQuerySet {
	return qs.w(qs.db.Where("task_rule_name != ?", taskRuleName))
}

// TaskRuleNameNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) TaskRuleNameNotIn(taskRuleName string, taskRuleNameRest ...string) TaskQuerySet {
	iArgs := []interface{}{taskRuleName}
	for _, arg := range taskRuleNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("task_rule_name NOT IN (?)", iArgs))
}

// Update is an autogenerated method
// nolint: dupl
func (u TaskUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u TaskUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) UpdatedAtEq(updatedAt time.Time) TaskQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) UpdatedAtGt(updatedAt time.Time) TaskQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) UpdatedAtGte(updatedAt time.Time) TaskQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) UpdatedAtLt(updatedAt time.Time) TaskQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) UpdatedAtLte(updatedAt time.Time) TaskQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) UpdatedAtNe(updatedAt time.Time) TaskQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// ===== END of query set TaskQuerySet

// ===== BEGIN of Task modifiers

// TaskDBSchemaField describes database schema field. It requires for method 'Update'
type TaskDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f TaskDBSchemaField) String() string {
	return string(f)
}

// TaskDBSchema stores db field names of Task
var TaskDBSchema = struct {
	ID                TaskDBSchemaField
	TaskName          TaskDBSchemaField
	TaskRuleName      TaskDBSchemaField
	TaskDesc          TaskDBSchemaField
	Status            TaskDBSchemaField
	Counts            TaskDBSchemaField
	CronSpec          TaskDBSchemaField
	OptUserAgent      TaskDBSchemaField
	OptMaxDepth       TaskDBSchemaField
	OptAllowedDomains TaskDBSchemaField
	OptURLFilters     TaskDBSchemaField
	OptMaxBodySize    TaskDBSchemaField
	LimitEnable       TaskDBSchemaField
	LimitDomainRegexp TaskDBSchemaField
	LimitDomainGlob   TaskDBSchemaField
	LimitDelay        TaskDBSchemaField
	LimitRandomDelay  TaskDBSchemaField
	LimitParallelism  TaskDBSchemaField
	CreatedAt         TaskDBSchemaField
	UpdatedAt         TaskDBSchemaField
}{

	ID:                TaskDBSchemaField("id"),
	TaskName:          TaskDBSchemaField("task_name"),
	TaskRuleName:      TaskDBSchemaField("task_rule_name"),
	TaskDesc:          TaskDBSchemaField("task_desc"),
	Status:            TaskDBSchemaField("status"),
	Counts:            TaskDBSchemaField("counts"),
	CronSpec:          TaskDBSchemaField("cron_spec"),
	OptUserAgent:      TaskDBSchemaField("opt_user_agent"),
	OptMaxDepth:       TaskDBSchemaField("opt_max_depth"),
	OptAllowedDomains: TaskDBSchemaField("opt_allowed_domains"),
	OptURLFilters:     TaskDBSchemaField("opt_url_filters"),
	OptMaxBodySize:    TaskDBSchemaField("opt_max_body_size"),
	LimitEnable:       TaskDBSchemaField("limit_enable"),
	LimitDomainRegexp: TaskDBSchemaField("limit_domain_regexp"),
	LimitDomainGlob:   TaskDBSchemaField("limit_domain_glob"),
	LimitDelay:        TaskDBSchemaField("limit_delay"),
	LimitRandomDelay:  TaskDBSchemaField("limit_random_delay"),
	LimitParallelism:  TaskDBSchemaField("limit_parallelism"),
	CreatedAt:         TaskDBSchemaField("created_at"),
	UpdatedAt:         TaskDBSchemaField("updated_at"),
}

// Update updates Task fields by primary key
// nolint: dupl
func (o *Task) Update(db *gorm.DB, fields ...TaskDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":                  o.ID,
		"task_name":           o.TaskName,
		"task_rule_name":      o.TaskRuleName,
		"task_desc":           o.TaskDesc,
		"status":              o.Status,
		"counts":              o.Counts,
		"cron_spec":           o.CronSpec,
		"opt_user_agent":      o.OptUserAgent,
		"opt_max_depth":       o.OptMaxDepth,
		"opt_allowed_domains": o.OptAllowedDomains,
		"opt_url_filters":     o.OptURLFilters,
		"opt_max_body_size":   o.OptMaxBodySize,
		"limit_enable":        o.LimitEnable,
		"limit_domain_regexp": o.LimitDomainRegexp,
		"limit_domain_glob":   o.LimitDomainGlob,
		"limit_delay":         o.LimitDelay,
		"limit_random_delay":  o.LimitRandomDelay,
		"limit_parallelism":   o.LimitParallelism,
		"created_at":          o.CreatedAt,
		"updated_at":          o.UpdatedAt,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Task %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// TaskUpdater is an Task updates manager
type TaskUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewTaskUpdater creates new Task updater
// nolint: dupl
func NewTaskUpdater(db *gorm.DB) TaskUpdater {
	return TaskUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Task{}),
	}
}

// ===== END of Task modifiers

// ===== END of all query sets
